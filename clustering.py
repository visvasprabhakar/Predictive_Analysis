# -*- coding: utf-8 -*-
"""clustering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-mJakYeDF5k7P2ONaxks5sTXzyrnp8yZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv('/content/drive/MyDrive/Mall_Customers.csv')

data.head()

data.describe()

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.distplot(data['Annual Income (k$)'])
plt.title('Distribution of Income ')
plt.xlabel  = 'Range of Income'
plt.ylabel = 'Count'
plt.subplot(1,2,2)
sns.distplot(data['Age'])
plt.title('Distribution of Age')
plt.xlabel = 'Range of Age'
plt.ylabel = 'Count'
sns.distplot(data['Age'])
plt.title('Age Distribution')

"""# seperation of independent and dependent variable"""

df=data.iloc[:,[3,4]].values
print(df.shape)

#Model building using random num of customer
from sklearn.cluster import KMeans
km=KMeans(n_clusters=5,init='k-means++',max_iter=300,n_init=10,random_state=41)

km.fit(df)

km.labels_

y_means=km.predict(df)

df[y_means==0,0]

plt.figure(figsize=(10,5))
plt.scatter(x=df[y_means==0,0],y=df[y_means==0,1],color='red')
plt.scatter(x=df[y_means==1,0],y=df[y_means==1,1],color='blue')
plt.scatter(x=df[y_means==2,0],y=df[y_means==2,1],color='green')
plt.scatter(x=df[y_means==3,0],y=df[y_means==3,1],color='yellow')
plt.scatter(x=df[y_means==4,0],y=df[y_means==4,1],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],s=300,label='centroids',color='pink')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.title('Customer of customers')
plt.legend()

from sklearn.metrics import silhouette_score

silhouette_avg=silhouette_score(df,y_means)
print(silhouette_avg)

wcss = []  # Initialize wcss as an empty list
for i in range(1, 11):
    km1 = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    km1.fit(df)  # Fit the KMeans model 'km1', not 'km'
    wcss.append(km1.inertia_)

plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()