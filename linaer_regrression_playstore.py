# -*- coding: utf-8 -*-
"""linaer_regrression_playstore

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RFaueBZAzdminp_ejEOdMFvm3cIwvizE

# Google playstore prediction using linear regression

# IMORTING  IMPORT FUNCTION
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# CONNECTING DATA SET"""

data=pd.read_csv('/content/drive/MyDrive/googleplaystore.csv')

"""# understand dataset"""

data.head()
data.info()

"""# Pre-processing
pandas library:data cleaning


1. clean epmty cell
2. clean wrong format
3. clean wrong data
4. remove duplicates


"""

data.dropna(inplace=True)

data.isnull().sum()

"""cleaning wrong format"""

data.dtypes

data['Reviews']=data['Reviews'].astype(int)

data['Installs']=data['Installs'].str.replace('+','')
data['Installs']=data['Installs'].str.replace(',','')

data['Installs']=data['Installs'].astype(int)

data['Price']=data['Price'].str.replace('$','')

data['Price']=data['Price'].astype(float)

def change_size(size):
  if 'M' in size:
   x=size[:-1]
   x=float(x)*1000
   return x
  elif 'k' in size:
    x=size[:-1]
    x=float(x)
    return x
  else:
    return None

data['Size']=data['Size'].apply(change_size)

data['Size'].fillna(method='ffill',inplace=True)

data.isnull().sum()

inp1=data.copy()

inp1.drop(['App','Last Updated','Current Ver','Android Ver'],axis=1,inplace=True)

inp1.head()

"""from google.colab import drive
drive.mount('/content/drive')

# Convert categorial data to Numerical data
"""

inp1=pd.get_dummies(inp1)

inp1.head()

"""# Extract Dependent and Independent Variable"""

y=inp1.pop('Rating')
x=inp1

"""seperate train and test"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

"""# Apply Linear Regression"""

from sklearn.linear_model import LinearRegression
lr=LinearRegression()

lr.fit(x_train,y_train)

y_pred=lr.predict(x_test)

from sklearn.metrics import mean_squared_error,r2_score
print('MSE',mean_squared_error(y_test,y_pred))
print('R2',r2_score(y_test,y_pred))

y_pred

y_test