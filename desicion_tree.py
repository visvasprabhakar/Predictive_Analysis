# -*- coding: utf-8 -*-
"""DESICION TREE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_C0AoexQn0ZITLG6fHi5gJu0zXC3fQTb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv('/content/drive/MyDrive/employee.csv')

data.head()

data.shape

data.info()

print(data.EmployeeCount.unique())
print(data.EmployeeNumber.unique())
print(data.Over18.unique())
print(data.StandardHours.unique())

data=data.drop(['EmployeeCount','EmployeeNumber','Over18','StandardHours'],axis=1)

"""# Categorical To Numerical"""

dt_dummies = pd.get_dummies(data[['BusinessTravel', 'Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus', 'OverTime']], drop_first=True)

data=data.drop(['BusinessTravel','Department','EducationField','Gender','JobRole','MaritalStatus','OverTime'],axis=1)

data=pd.concat([data,dt_dummies],axis=1)

data.head()

"""# Seperation of X and Y"""

x=data.drop('Attrition',axis=1)
y=data['Attrition']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

"""# Object-1"""

from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
dtree=DecisionTreeClassifier()
dtree.fit(x_train,y_train)
y_pred=dtree.predict(x_test)

"""# Object-2"""

dtree2=DecisionTreeClassifier(criterion='entropy',max_depth=6)
dtree2.fit(x_train,y_train)
y_pred2=dtree2.predict(x_test)

"""# Object-3"""

dtree3=DecisionTreeClassifier(criterion='entropy',max_depth=6,min_samples_leaf=4)
dtree3.fit(x_train,y_train)
y_pred3=dtree3.predict(x_test)

from sklearn import metrics
print('Acuuracy M1',metrics.accuracy_score(y_test,y_pred))
print('Acuuracy M2',metrics.accuracy_score(y_test,y_pred2))
print('Acuuracy M3',metrics.accuracy_score(y_test,y_pred3))

"""# Grid Search"""

from sklearn.model_selection import GridSearchCV
param_grid={"max_depth":[2,3,4,5,6,7],"max_features":[2,3,4,5,6,7],"min_samples_split":[2,3,4,5,6,7],"criterion":["gini","entropy"],"min_samples_leaf":[1,2,3,4,5]}
grid=GridSearchCV(dtree3,param_grid,cv=5)
grid.fit(x_train,y_train)
print(grid.best_params_)

"""# Oject-4"""

dtree4=DecisionTreeClassifier(criterion='entropy',max_depth=5,max_features=6,min_samples_leaf=4,min_samples_split=6)
dtree4.fit(x_train,y_train)
y_pred4=dtree4.predict(x_test)

print('Acuuracy M4',metrics.accuracy_score(y_test,y_pred4))

from sklearn.metrics import confusion_matrix
print("Confusion Matrix:",confusion_matrix(y_test,y_pred4))

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred4))

dtree4.feature_importances_

print(dict(zip(x_train.columns,dtree4.feature_importances_)))

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt # Make sure to import matplotlib

plt.figure(figsize=(40,20))

# Define class_names if you haven't already.
# Replace with the actual names of your classes
class_names = ['no', 'yes']

# Assuming 'x' is a pandas DataFrame, use 'columns' instead of 'coloumns'
plot_tree(dtree4, class_names=class_names, feature_names=x.columns, filled=True)
plt.show()